const char* burstsort_cl = 
"int compareEntry(__global char * buffer, int p1, char * key, int entryLength){\n"
"int p = 2;\n"
"while(p < 10 && buffer[p1 * entryLength + p] == key[p]){\n"
"p++;\n"
"}\n"
"return p == 10 ? 0 : buffer[p1 * entryLength + p] - key[ p];\n"
"}\n"
"\n"
"__kernel\n"
"void burstsort(__global char *buffer, __global int *clPosArray, int nodeSize,int entryLength){\n"
"int left,right,top,i,j,k,p,z,middle;\n"
"int stack[100];\n"
"char c;\n"
"char middleKey[11];\n"
"middleKey[10] = '0';\n"
"int idx = get_global_id(0);\n"
"int processingSize = nodeSize / 32;\n"
"\n"
"for(p = idx * processingSize; p < (idx + 1) * processingSize; p++){\n"
"left = clPosArray[p];\n"
"right = clPosArray[p+1] - 1;\n"
"top = -1;\n"
"stack[++top] = left;\n"
"stack[++top] = right;\n"
"\n"
"while(top > 0){\n"
"right = stack[top--];\n"
"left = stack[top--];\n"
"i = left;\n"
"j = right;\n"
"if(right <= left) continue;\n"
"middle = ((left + right)/2) * entryLength;\n"
"for(int z = 0; z < 10; z++)\n"
"middleKey[z] = buffer[ middle + z];\n"
"\n"
"do{\n"
"while((compareEntry(buffer,i,middleKey,entryLength) < 0) && (i < right)) {\n"
"i++;\n"
"}\n"
"while((compareEntry(buffer,j,middleKey,entryLength) > 0) && (j > left)) {\n"
"j--;\n"
"}\n"
"if(i <= j) {\n"
"for(k = 0; k <entryLength; k++){\n"
"c = buffer[i*entryLength + k];\n"
"buffer[i*entryLength + k] = buffer[j*entryLength + k];\n"
"buffer[j*entryLength + k] = c;\n"
"}\n"
"i++;\n"
"j--;\n"
"}\n"
"}while(i <= j);\n"
"\n"
"if(left < j){\n"
"stack[++top] = left;\n"
"stack[++top] = j;\n"
"}\n"
"\n"
"if(right > i){\n"
"stack[++top] = i;\n"
"stack[++top] = right;\n"
"}\n"
"}\n"
"\n"
"}\n"
"}\n"
;
